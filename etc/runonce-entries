#!/bin/bash
# This file came from Pi-Apps and is being used in Pi-Apps Go.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

#This script contains various dirty fixes to keep Pi-Apps Go running smoothly as it matures.
#It repairs mistakes that some apps have made, as well as fixing other system issues. Some apps have been removed or renamed.

#This script is executed by the updater binary as well as the main Pi-Apps Go installation script.

#This script uses the 'runonce' function - it avoids running any of these fixes more than once.
#If a runonce entry is modified, then it will be run once more.

#Set Pi_APPS_DIR variable if necessary
if [ -z "$PI_APPS_DIR" ];then
  PI_APPS_DIR="$(readlink -f "$(dirname "$(dirname "$0")")")"
fi

#Get pi-apps api functions if necessary
if ! command -v runonce >/dev/null ;then
  set -a #make all functions in the api available to subprocesses
  source "${PI_APPS_DIR}/api"
fi

#add ~/Desktop /opt /usr/local/bin and /usr/local/share/applications if not present
runonce <<"EOF"
  if [ -f "$HOME/Desktop" ]; then
    rm -f "$HOME/Desktop"
    mkdir -p "$HOME/Desktop" || exit 1
  elif [ ! -d "$HOME/Desktop" ]; then
    mkdir -p "$HOME/Desktop" || exit 1
  fi
  if [ ! -d /opt ]; then
    sudo_popup mkdir /opt || exit 1
  fi
  if [ ! -d /usr/local/bin ]; then
    sudo_popup mkdir -p /usr/local/bin || exit 1
  fi
  if [ ! -d /usr/local/share/applications ]; then
    sudo_popup mkdir -p /usr/local/share/applications || exit 1
  fi
  #Pi-Apps tries to avoid unnecessary reboots at all cost. desktop launchers can be installed to /usr/local/share/applications, which is often not searched by default if /usr/local/share did not exist on boot.
  #This path is added to $XDG_DATA_DIRS on the next reboot, but we don't want to wait for that!
  #If XDG_DATA_DIRS is missing /usr/local/share, then bind-mount /usr/local/share/applications to /usr/share/applications
  if [[ "$XDG_DATA_DIRS" != */usr/local/share* ]] && [ -z "$(ls /usr/share/applications/usr-local-temporary)" ];then
    sudo_popup mkdir -p /usr/share/applications/usr-local-temporary
    sudo_popup mount --bind /usr/local/share/applications /usr/share/applications/usr-local-temporary
  fi
EOF

#generate settings
runonce <<"EOF"
  if [ "$(ls "$PI_APPS_DIR/data/settings" 2>/dev/null | wc -l)" -le 2 ];then
    "${PI_APPS_DIR}/settings" refresh
  fi
EOF

# remove deprecated apps (only when running in a visible terminal)
case $(ps -o stat= -p $$) in
  *+*) # Running in foreground
runonce <<"EOF"
  # no deprecated apps so far in the Go rewrite considering this project has not been out for long, but if a deprecated app were to occur, do this per app:
  # remove_deprecated_apps "app name" "architecture" "reason"
  true
EOF
  ;;
esac

#migrate renamed apps
#future app renames should follow the standard set by renaming 'Geekbench' to 'Geekbench 5'
runonce <<"EOF"
  # so far no app renames in the Go rewrite considering this project has not been out for long, but if an app were to be renamed, do this per app:
  #
  # for simple renames, do this:
  # rm -rf "${PI_APPS_DIR}/apps/old name"
  # mv -f "${PI_APPS_DIR}/data/status/old name" "${PI_APPS_DIR}/data/status/new name" 2>/dev/null
  #
  # for more complex renames with multiple steps that detect if the app is installed, do this:
  # if [ -f "${PI_APPS_DIR}/data/status/old name" ] && [ $(cat "${PI_APPS_DIR}/data/status/old name") == "installed" ]; then
  #  # installed
  #  rm -rf "${PI_APPS_DIR}/apps/old name"  "${PI_APPS_DIR}/apps/new name"
  #  mv -f "${PI_APPS_DIR}/data/status/old name" "${PI_APPS_DIR}/data/status/new name"
  # else
  #  # not installed
  #  rm -rf "${PI_APPS_DIR}/apps/old name"
  # fi
  
  true
EOF

#transition from box86-no-binfmt-restart package to box86
runonce <<"EOF"
  if dpkg -l box86-no-binfmt-restart &>/dev/null ;then
    sudo_popup bash -c 'dpkg --remove box86-no-binfmt-restart'
    rm -f "${PI_APPS_DIR}/data/status/Box86"
    "${PI_APPS_DIR}/manage" uninstall Box86
    "${PI_APPS_DIR}/manage" install Box86
  fi
  
  #if box86 is supposedly installed, but box86 command not found, reinstall box86
  if [ "$(app_status Box86)" == 'installed' ] && ! command -v box86 >/dev/null;then
    rm -f "${PI_APPS_DIR}/data/status/Box86"
    "${PI_APPS_DIR}/manage" uninstall Box86
    "${PI_APPS_DIR}/manage" install Box86
  fi
  true
EOF

#Doom3 app by techcoder20 installed problematic SDL packages. (sdl2-image sdl2-mixer sdl2-ttf)
#Nothing else uses them, and they just cause problems with many other games, so remove them
runonce <<"EOF"
  if package_installed sdl2-image ;then
    list+='sdl2-image '
  fi
  if package_installed sdl2-mixer ;then
    list+='sdl2-mixer '
  fi
  if package_installed sdl2-ttf ;then
    list+='sdl2-ttf '
  fi
  
  if [ ! -z "$list" ]; then
    sudo_popup apt -y purge $list || exit 1
  fi
  true
EOF


#update pi-apps .desktop icons
runonce <<"EOF"
#menu button

echo "Updating menu button..."
mkdir -p ~/.local/share/applications
if [ -f /etc/xdg/menus/lxde-pi-applications.menu ];then
echo "[Desktop Entry]
Name=Pi-Apps Go
Comment=Raspberry Pi App Store for open source projects
Exec=${PI_APPS_DIR}/gui
Icon=${PI_APPS_DIR}/icons/logo.png
Terminal=false
StartupWMClass=Pi-Apps
Type=Application
Categories=Utility
StartupNotify=true" > ~/.local/share/applications/pi-apps-go.desktop
else
echo "[Desktop Entry]
Name=Pi-Apps Go
Comment=Raspberry Pi App Store for open source projects
Exec=${PI_APPS_DIR}/gui
Icon=${PI_APPS_DIR}/icons/logo.png
Terminal=false
StartupWMClass=Pi-Apps
Type=Application
Categories=Utility;System;PackageManager;
StartupNotify=true" > ~/.local/share/applications/pi-apps-go.desktop
fi

chmod 755 ~/.local/share/applications/pi-apps.desktop
gio set ~/.local/share/applications/pi-apps-go.desktop "metadata::trusted" yes

#copy menu button to Desktop
mkdir -p ~/Desktop
cp -f ~/.local/share/applications/pi-apps-go.desktop ~/Desktop/

chmod 755 ~/Desktop/pi-apps-go.desktop
gio set ~/Desktop/pi-apps-go.desktop "metadata::trusted" yes

#copy icon to local icons directory (necessary on some wayland DEs like on PiOS Wayfire)
mkdir -p ~/.local/share/icons
cp -f ${PI_APPS_DIR}/icons/logo.png ~/.local/share/icons/pi-apps-go.png
cp -f ${PI_APPS_DIR}/icons/settings.png ~/.local/share/icons/pi-apps-go-settings.png

#settings menu button
echo "Updating Settings menu button..."
echo "[Desktop Entry]
Name=Pi-Apps Go Settings
Comment=Configure Pi-Apps or create an App
Exec=${PI_APPS_DIR}/settings
Icon=${PI_APPS_DIR}/icons/settings.png
Terminal=false
StartupWMClass=Pi-Apps-Go-Settings
Type=Application
Categories=Settings;
StartupNotify=true" > ~/.local/share/applications/pi-apps-go-settings.desktop

echo "Updating autostarted updater..."
mkdir -p ~/.config/autostart
echo "[Desktop Entry]
Name=Pi-Apps Go Updater
Exec=${PI_APPS_DIR}/updater onboot
Icon=${PI_APPS_DIR}/icons/logo.png
Terminal=false
StartupWMClass=Pi-Apps-Go
Type=Application
X-GNOME-Autostart-enabled=true
Hidden=false
NoDisplay=false" > ~/.config/autostart/pi-apps-go-updater.desktop

EOF

#Fix mimeapps containing only boxy svg mimeapp entry without [Added associations] appearing first
runonce <<"EOF"
  if [ "$(head -n1 ~/.config/mimeapps.list)" == 'image/svg+xml;application/illustrator=boxy-svg.desktop;' ];then
    #remove first line from mimeapps.list
    sed -i 1d ~/.config/mimeapps.list
    
    #Add it back correctly
    echo "[Added Associations]
image/svg+xml=boxy-svg.desktop;
application/illustrator=boxy-svg.desktop;" >> ~/.config/mimeapps.list
  fi
EOF

#correct home ownership of gnupg repo
runonce <<"EOF"
  if [ -d ~/.gnupg ] && stat -c "%U %G" ~/.gnupg/* | grep -q "root"; then
    sudo_popup chown -R $USER:$USER ~/.gnupg
  fi
EOF

#fix unintended wget-log pollution due to wget bug https://savannah.gnu.org/bugs/?51181
runonce <<"EOF"
  if ls ~/wget-log*; then
    sudo_popup rm -rf ~/wget-log*
  fi
EOF

#remove pi-apps dummy debs leftover from interrupted runs of package_install
runonce <<"EOF"
  find ~/ -maxdepth 1 | grep -xE "$HOME/pi-apps-[0-9a-z]{8}(.deb)?" | xargs rm -rf
EOF

#Install rpi-chromium-mods back from accidental chromium update-reinstall that did not add it back
runonce <<"EOF"
  #if rpi-chromium-mods is available, not installed, and was uninstalled on the affected dates, and the Chromium app was uninstalled and installed, install rpi-chromium-mods back.
  if package_available rpi-chromium-mods && ! package_installed rpi-chromium-mods && \
    grep ' not-installed rpi-chromium-mods' /var/log/dpkg.log | tail -1 | grep -q '2024-02-\(22\|23\|24\|25\|26\)' && \
    find "${PI_APPS_DIR}"/logs | grep -qF 'uninstall-success-Chromium.log' && find "${PI_APPS_DIR}"/logs | grep -qF 'install-success-Chromium.log';then
    
    #install rpi-chromium-mods back.
    apt_lock_wait
    sudo_popup apt install -y rpi-chromium-mods
  fi
EOF

#include DEBIAN_FRONTEND variable in sudo default environment if set
runonce <<"EOF"
  sudo_popup sh -c "cat > /etc/sudoers.d/debian_frontend << _EOF_
Defaults      env_keep += DEBIAN_FRONTEND
_EOF_"
EOF

true
